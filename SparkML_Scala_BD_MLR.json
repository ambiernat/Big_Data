{"paragraphs":[{"text":"import org.apache.spark.sql.types._\n\nval customSchema = StructType(Array(\n  StructField(\"overall\", DoubleType, true),\n  StructField(\"reviewerid\", StringType, true),\n  StructField(\"reviewtext\", StringType, true),\n  StructField(\"asin\", StringType, true))\n)","dateUpdated":"2021-04-24T08:28:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types._\ncustomSchema: org.apache.spark.sql.types.StructType = StructType(StructField(overall,DoubleType,true), StructField(reviewerid,StringType,true), StructField(reviewtext,StringType,true), StructField(asin,StringType,true))\n"}]},"apps":[],"jobName":"paragraph_1619252285538_159638003","id":"20210418-031325_160919994","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5449","user":"anonymous","dateFinished":"2021-04-24T08:28:11+0000","dateStarted":"2021-04-24T08:28:10+0000"},{"text":"val data = spark.read.format(\"csv\")\n  .option(\"sep\", \",\")\n  .option(\"inferSchema\", \"false\")\n  .schema(customSchema)\n  .option(\"header\", \"false\")\n  .load(\"hdfs:///user/maria_dev/for_nlp_analysis_all.csv\")\n  .na.drop()","dateUpdated":"2021-04-24T08:28:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"data: org.apache.spark.sql.DataFrame = [overall: double, reviewerid: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1619252285542_158099007","id":"20210419-090554_1723481566","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5450","user":"anonymous","dateFinished":"2021-04-24T08:28:13+0000","dateStarted":"2021-04-24T08:28:11+0000"},{"text":"data.registerTempTable(\"ratings1\")","dateUpdated":"2021-04-24T08:28:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1619252285544_155790514","id":"20210419-090553_799682315","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5451","user":"anonymous","dateFinished":"2021-04-24T08:28:14+0000","dateStarted":"2021-04-24T08:28:12+0000"},{"text":"%sql\nselect overall, count(*) as count_ratings from ratings1 group by overall order by overall","dateUpdated":"2021-04-24T08:28:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{},"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"overall\tcount_ratings\n1.0\t135761\n2.0\t127712\n3.0\t293006\n4.0\t680366\n5.0\t1858870\n"}]},"apps":[],"jobName":"paragraph_1619252285546_156560012","id":"20210419-090553_291617743","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5452","user":"anonymous","dateFinished":"2021-04-24T08:28:38+0000","dateStarted":"2021-04-24T08:28:14+0000"},{"text":"import org.apache.spark.sql.functions.{coalesce, lit, typedLit}\r\n\r\n// create a mapping\r\nval translationMap = Map(\r\n  1 -> 0,\r\n  2 -> 0,\r\n  3 -> 1, \r\n  4 -> 2,\r\n  5 -> 2\r\n)\r\n\r\n// convert a map to column\r\nval translationMapCol = typedLit(translationMap)\r\n\r\n// add translation\r\nval DF = data.withColumn(\"label\", coalesce(translationMapCol($\"overall\"), lit(\"\")).cast(DoubleType))\r\n\r\nDF.printSchema()","dateUpdated":"2021-04-24T08:28:12+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.{coalesce, lit, typedLit}\ntranslationMap: scala.collection.immutable.Map[Int,Int] = Map(5 -> 2, 1 -> 0, 2 -> 0, 3 -> 1, 4 -> 2)\ntranslationMapCol: org.apache.spark.sql.Column = keys: [5,1,2,3,4], values: [2,0,0,1,2]\nDF: org.apache.spark.sql.DataFrame = [overall: double, reviewerid: string ... 3 more fields]\nroot\n |-- overall: double (nullable = true)\n |-- reviewerid: string (nullable = true)\n |-- reviewtext: string (nullable = true)\n |-- asin: string (nullable = true)\n |-- label: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1619252285557_163100743","id":"20210419-090552_1313164194","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5453","user":"anonymous","dateFinished":"2021-04-24T08:28:43+0000","dateStarted":"2021-04-24T08:28:14+0000"},{"text":"DF.registerTempTable(\"ratings2\")","dateUpdated":"2021-04-24T08:28:14+0000","config":{"colWidth":12,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1619252285558_164254990","id":"20210419-090722_1053099626","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5454","user":"anonymous","dateFinished":"2021-04-24T08:28:43+0000","dateStarted":"2021-04-24T08:28:38+0000"},{"text":"%sql\nselect label, count(*) as count_ratings from ratings2 group by label order by label","dateUpdated":"2021-04-24T08:28:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false},"helium":{}}},"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"label\tcount_ratings\n0.0\t263473\n1.0\t293006\n2.0\t2539236\n"}]},"apps":[],"jobName":"paragraph_1619252285559_163870241","id":"20210419-090723_1225502256","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5455","user":"anonymous","dateFinished":"2021-04-24T08:29:06+0000","dateStarted":"2021-04-24T08:28:43+0000"},{"text":"\nDF.count\nDF.columns","dateUpdated":"2021-04-24T08:28:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res39: Long = 3095715\nres40: Array[String] = Array(overall, reviewerid, reviewtext, asin, label)\n"}]},"apps":[],"jobName":"paragraph_1619252285560_161946496","id":"20210419-090722_1609336096","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5456","user":"anonymous","dateFinished":"2021-04-24T08:29:38+0000","dateStarted":"2021-04-24T08:28:44+0000"},{"text":"// // subsample a smaller dataset and filter only needed columns\n// val sampSize = 20000\n// val frac = sampSize.toDouble/data.count\n// val sampledData = DF.sample(withReplacement = false, fraction = frac, seed = 42) //.select(\"asin\", \")\n// sampledData.count","dateUpdated":"2021-04-24T08:28:16+0000","config":{"colWidth":12,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1619252285561_161561747","id":"20210419-090721_1782838584","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5457","user":"anonymous","dateFinished":"2021-04-24T08:29:38+0000","dateStarted":"2021-04-24T08:29:07+0000"},{"text":"// convert to spark DF and show schema\nval ratingsDF = DF\n\n// = sampledData.toDF()//.withColumnRenamed(\"overall\", \"label\")\nratingsDF.printSchema()","dateUpdated":"2021-04-24T08:28:17+0000","config":{"colWidth":12,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ratingsDF: org.apache.spark.sql.DataFrame = [overall: double, reviewerid: string ... 3 more fields]\nroot\n |-- overall: double (nullable = true)\n |-- reviewerid: string (nullable = true)\n |-- reviewtext: string (nullable = true)\n |-- asin: string (nullable = true)\n |-- label: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1619252285561_161561747","id":"20210419-090721_493091585","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5458","user":"anonymous","dateFinished":"2021-04-24T08:29:40+0000","dateStarted":"2021-04-24T08:29:38+0000"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1619252489816_-1582045292","id":"20210424-082129_1016686443","dateCreated":"2021-04-24T08:21:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6805","text":"ratingsDF.count","dateUpdated":"2021-04-24T08:29:39+0000","dateFinished":"2021-04-24T08:30:03+0000","dateStarted":"2021-04-24T08:29:39+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res51: Long = 3095715\n"}]}},{"text":"// check for duplicate reviews\nval uniqueCheck = ratingsDF.groupBy(\"asin\", \"reviewerid\", \"overall\").count().orderBy(desc(\"count\"))\nuniqueCheck.show()","dateUpdated":"2021-04-24T08:28:18+0000","config":{"colWidth":12,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"uniqueCheck: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [asin: string, reviewerid: string ... 2 more fields]\n+----------+--------------+-------+-----+\n|      asin|    reviewerid|overall|count|\n+----------+--------------+-------+-----+\n|B00HZ5STKQ|A2YO4PV4LCYJHA|    5.0|   13|\n|B0161WIX2W|A30S17M0I6H57M|    5.0|   11|\n|B015BIHKH6|A3OH101U0CPUC7|    5.0|   11|\n|B00HZ5STKQ|A3ICNR9APGP07S|    5.0|   10|\n|B015BIHKH6|A2TXR85WQLE32N|    5.0|   10|\n|B00HZ5STKQ|A24CFOYIVQWM7I|    5.0|    9|\n|B00HZ5STKQ|A2FDLUI500WUWA|    5.0|    9|\n|B00HZ5STKQ| AUTE35YWQDOIZ|    5.0|    8|\n|B0013TPY3A|A17FEZBWPDS4KJ|    2.0|    8|\n|B00HZ5STKQ|A2JTL5PB22AJGN|    5.0|    7|\n|B00HZ5STKQ| AIFV5J5XP7YGK|    5.0|    7|\n|B00HZ5STKQ|A1K4OTR4XIAKSH|    5.0|    7|\n|B0013TPY3A|A3HNFOQ2ZHP299|    5.0|    6|\n|B00HZ5STKQ|A3RI7M91TMWK3S|    5.0|    6|\n|B00XUR3BTC| A8VYIGNN6SZKV|    5.0|    6|\n|B0013N88GG|A1K240AQNKV9VP|    5.0|    6|\n|B00HZ5STKQ| AHLAPCD6B5E07|    5.0|    6|\n|B015BIHKH6|A3U0ER6TKM83C8|    5.0|    6|\n|B00ZZNF0TS|A3UKEVEDW8FNG8|    5.0|    6|\n|B0013TPY3A| A73KIZLHJ5LZ1|    5.0|    6|\n+----------+--------------+-------+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1619252285562_162715994","id":"20210419-090720_1163161480","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5459","user":"anonymous","dateFinished":"2021-04-24T08:30:49+0000","dateStarted":"2021-04-24T08:29:40+0000"},{"text":"// drop duplicates\n\nval DF = ratingsDF.dropDuplicates(Array(\"asin\",\"reviewerid\"))","dateUpdated":"2021-04-24T08:28:18+0000","config":{"colWidth":12,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [overall: double, reviewerid: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1619252285563_162331245","id":"20210419-090719_354246450","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5460","user":"anonymous","dateFinished":"2021-04-24T08:30:50+0000","dateStarted":"2021-04-24T08:30:04+0000"},{"text":"val DF2 = DF.filter($\"reviewtext\".isNotNull)","dateUpdated":"2021-04-24T08:28:19+0000","config":{"colWidth":12,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DF2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [overall: double, reviewerid: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1619252285564_160407501","id":"20210419-090718_1197946349","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5461","user":"anonymous","dateFinished":"2021-04-24T08:30:51+0000","dateStarted":"2021-04-24T08:30:49+0000"},{"text":"val vocabSize = DF2.withColumn(\"reviewtext\", lower($\"reviewtext\")).withColumn(\"reviewtext\", split(col(\"reviewtext\"), \" \").cast(\"array<string>\")).select($\"asin\", explode($\"reviewtext\").alias(\"exploded\")).groupBy(\"exploded\").count().count","dateUpdated":"2021-04-24T08:28:19+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"vocabSize: Long = 999323\n"}]},"apps":[],"jobName":"paragraph_1619252285565_160022752","id":"20210419-103433_1382614073","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5462","user":"anonymous","dateFinished":"2021-04-24T08:34:40+0000","dateStarted":"2021-04-24T08:30:50+0000"},{"text":"import org.apache.spark.ml.feature.{RegexTokenizer, Tokenizer, StopWordsRemover, CountVectorizer, HashingTF, IDF}\nimport scala.math.pow\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.tuning.{CrossValidator, ParamGridBuilder}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\n//We define the RegexTokenizer() to convert reviews from plain text form to words\nval regextokenizer = new RegexTokenizer().setGaps(false)\n    .setPattern(\"\\\\w+(?:'\\\\w+)?|[^\\\\w\\\\s]\")\n    .setInputCol(\"reviewtext\")\n    .setOutputCol(\"reviewwords\")\n    \n    \n//We define remove the stop words from the reviewwords\nval sw_remover = new StopWordsRemover()\n    .setCaseSensitive(false)\n    .setInputCol(\"reviewwords\")\n    .setOutputCol(\"words_filtered\")\n    \n    \n//  Hashing TF to vectorize features\nval hashtf = new HashingTF()\n            .setInputCol(\"words_filtered\")\n            .setOutputCol(\"tf\")\n            .setNumFeatures(pow(2,12).toInt)\n            \n            \n// Lowers the terms of documents that are very common\nval idf = new IDF()\n        .setInputCol(\"tf\")\n        .setOutputCol(\"tfidf\")\n        \n        \n// Set the pipeline    \nval preprocessing_stages = Array(regextokenizer, sw_remover, hashtf, idf)\nval preprocessing_pipeline = new Pipeline()\n                    .setStages(preprocessing_stages)\n                    \n// Split into training and test datasets and, just to be safe, define the target column                  \nval Array(trainingData, testData) = DF2.randomSplit(Array(0.8, 0.2), seed=42)\nval labelColumn = \"label\"\n\nprintln(\"Starting Multinomial Logistic Regression\")\n// Initialise hyperparameters that will be later tuned and define the multinomial logistic regression model, including lambda parameter corresponding to regularization\nval lambda_par = 0.02\nval alpha_par = 0.3\nval en_mlr = new LogisticRegression()\n        .setLabelCol(labelColumn)\n        .setFeaturesCol(\"tfidf\")\n        .setRegParam(lambda_par)\n        .setMaxIter(100)\n        .setElasticNetParam(alpha_par)\n        .setFamily(\"multinomial\")\n        \n\n// Define the full model pipeline - preprocessing + model       \nval model_stages = Array(preprocessing_pipeline, en_mlr)\nval model_pipeline = new Pipeline()\n                    .setStages(model_stages)\n                    \n                    \n// Define the param grid used for tuning the hyperparameters                    \nval paramGrid = new ParamGridBuilder()\n  .addGrid(en_mlr.regParam, Array(0.01, 0.05, 0.1))\n  .addGrid(en_mlr.elasticNetParam, Array(0.1, 0.2, 0.4))\n  .build()\n  \n  \n// Define the evaluator used for evaluating the model\nval evaluator = new MulticlassClassificationEvaluator()\n                .setLabelCol(labelColumn)\n\n\n// We now treat the Pipeline as an Estimator, wrapping it in a CrossValidator instance.\n// This will allow us to jointly choose parameters for all Pipeline stages.\n// A CrossValidator requires an Estimator, a set of Estimator ParamMaps, and an Evaluator.\n// metricName() param for metric name in evaluation (supports \"f1\" (default), \"weightedPrecision\", \"weightedRecall\", \"accuracy\")\n// Note that the evaluator here is a BinaryClassificationEvaluator and its default metric\n// is F1 score\n\nval crossval = new CrossValidator()\n  .setEstimator(model_pipeline)\n  .setEvaluator(evaluator)\n  .setEstimatorParamMaps(paramGrid)\n  .setNumFolds(3)  // Use 3+ in practice\n  \n// Run cross-validation, and choose the best set of parameters.\nval cvModelMLR = crossval.fit(trainingData)\n\n// Now we can optionally save the fitted pipeline to disk\ncvModelMLR.write.overwrite().save(\"hdfs:///user/maria_dev/spark-mlr-cv-best\")\n\n// And load it back in during production\n// val cvModelMLR = PipelineModel.load(\"hdfs:///user/maria_dev/spark-mlr-cv-best\")","dateUpdated":"2021-04-24T08:28:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{RegexTokenizer, Tokenizer, StopWordsRemover, CountVectorizer, HashingTF, IDF}\nimport scala.math.pow\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.tuning.{CrossValidator, ParamGridBuilder}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nregextokenizer: org.apache.spark.ml.feature.RegexTokenizer = regexTok_ba4c7038ca98\nsw_remover: org.apache.spark.ml.feature.StopWordsRemover = stopWords_43678674b3c3\nhashtf: org.apache.spark.ml.feature.HashingTF = hashingTF_8597033eade0\nidf: org.apache.spark.ml.feature.IDF = idf_acd8b13a859e\npreprocessing_stages: Array[org.apache.spark.ml.PipelineStage with org.apache.spark.ml.param.shared.HasOutputCol with org.apache.spark.ml.param.shared.HasInputCol with org.apache.spark.ml.util.DefaultParamsWritable{def copy(extra: org.apache.spark.ml.param.ParamMap): org.apache.spark.ml.PipelineStage with org.apache.spark.ml.param.shared.HasOutputCol with org.apache.spark.ml.param.shared.HasInputCol with org.apache.spark.ml.util.DefaultParamsWritable{def copy(extra: org.apache.spark.ml.param.ParamMap): org.apache.spark.ml.PipelineStage with org.apache.spark.ml.param.shared.HasOutputCol with org.apache.spark.ml.param.shared.HasInputCol with org.apache.spark.ml.util.DefaultParamsWritable{def copy(extra: org.apache.spark.ml.param.ParamMap): org.apache.spark.ml.PipelineStage with org.apache...preprocessing_pipeline: org.apache.spark.ml.Pipeline = pipeline_7fb491aef29c\ntrainingData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [overall: double, reviewerid: string ... 3 more fields]\ntestData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [overall: double, reviewerid: string ... 3 more fields]\nlabelColumn: String = label\nStarting Multinomial Logistic Regression\nlambda_par: Double = 0.02\nalpha_par: Double = 0.3\nen_mlr: org.apache.spark.ml.classification.LogisticRegression = logreg_349082708463\nmodel_stages: Array[org.apache.spark.ml.Estimator[_ >: org.apache.spark.ml.classification.LogisticRegressionModel with org.apache.spark.ml.PipelineModel <: org.apache.spark.ml.Model[_ >: org.apache.spark.ml.classification.LogisticRegressionModel with org.apache.spark.ml.PipelineModel <: org.apache.spark.ml.Transformer with org.apache.spark.ml.util.MLWritable] with org.apache.spark.ml.util.MLWritable] with org.apache.spark.ml.util.MLWritable{def copy(extra: org.apache.spark.ml.param.ParamMap): org.apache.spark.ml.Estimator[_ >: org.apache.spark.ml.classification.LogisticRegressionModel with org.apache.spark.ml.PipelineModel <: org.apache.spark.ml.Transformer with org.apache.spark.ml.util.MLWritable] with org.apache.spark.ml.util.MLWritable{def copy(extra: org.apache.spark.ml.param.ParamM...model_pipeline: org.apache.spark.ml.Pipeline = pipeline_f4004a48e9b6\nparamGrid: Array[org.apache.spark.ml.param.ParamMap] =\nArray({\n\tlogreg_349082708463-elasticNetParam: 0.1,\n\tlogreg_349082708463-regParam: 0.01\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.2,\n\tlogreg_349082708463-regParam: 0.01\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.4,\n\tlogreg_349082708463-regParam: 0.01\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.1,\n\tlogreg_349082708463-regParam: 0.05\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.2,\n\tlogreg_349082708463-regParam: 0.05\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.4,\n\tlogreg_349082708463-regParam: 0.05\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.1,\n\tlogreg_349082708463-regParam: 0.1\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.2,\n\tlogreg_349082708463-regParam: 0.1\n}, {\n\tlogreg_349082708463-elasticNetParam: 0.4,\n\tlogreg_349082708463-...evaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_85b86caeee48\ncrossval: org.apache.spark.ml.tuning.CrossValidator = cv_fe0adb85e9e1\ncvModelMLR: org.apache.spark.ml.tuning.CrossValidatorModel = cv_fe0adb85e9e1\n"}]},"apps":[],"jobName":"paragraph_1619252285566_161176998","id":"20210419-095500_442419659","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5463","user":"anonymous","dateFinished":"2021-04-25T05:19:15+0000","dateStarted":"2021-04-24T08:30:51+0000"},{"text":"import org.apache.spark.mllib.evaluation.MulticlassMetrics\n\n\n// Prepare test data by using the (partial) preprocessing_pipeline\nval tfidf_testData = preprocessing_pipeline.fit(DF2).transform(testData)\n\n// Make predictions on test documents. cvModel uses the best model found (multinomial logistic regression model).\nval results = cvModelMLR.transform(testData)\n                     .select(\"asin\", \"reviewtext\",\"label\", \"probability\", \"prediction\")\n                     \n// Compute raw scores on the test set\nval predictionAndLabels = results\n        .select($\"prediction\",$\"label\")\n        .as[(Double, Double)]\n        .rdd\n        \n// EVALUATE THE MODEL\n        \n// Instantiate metrics object\nval metrics = new MulticlassMetrics(predictionAndLabels)\n\n// Confusion matrix\nprintln(\"Confusion matrix:\")\nprintln(metrics.confusionMatrix)\n\n// Overall Statistics\nval accuracy = metrics.accuracy\nprintln(\"Summary Statistics\")\nprintln(s\"Accuracy = $accuracy\")\n\n\n// Weighted stats\nprintln(s\"Weighted precision: ${metrics.weightedPrecision}\")\nprintln(s\"Weighted recall: ${metrics.weightedRecall}\")\nprintln(s\"Weighted F1 score: ${metrics.weightedFMeasure}\")\nprintln(s\"Weighted false positive rate: ${metrics.weightedFalsePositiveRate}\")","dateUpdated":"2021-04-24T08:28:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.mllib.evaluation.MulticlassMetrics\ntfidf_testData: org.apache.spark.sql.DataFrame = [overall: double, reviewerid: string ... 7 more fields]\nresults: org.apache.spark.sql.DataFrame = [asin: string, reviewtext: string ... 3 more fields]\npredictionAndLabels: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[10352] at rdd at <console>:45\nmetrics: org.apache.spark.mllib.evaluation.MulticlassMetrics = org.apache.spark.mllib.evaluation.MulticlassMetrics@61ebc1e4\nConfusion matrix:\n14995.0  2721.0  34848.0   \n3775.0   6757.0  48122.0   \n2900.0   3391.0  498820.0  \naccuracy: Double = 0.8446333046149054\nSummary Statistics\nAccuracy = 0.8446333046149054\nWeighted precision: 0.8116540554906322\nWeighted recall: 0.8446333046149055\nWeighted F1 score: 0.8046790477510173\nWeighted false positive rate: 0.6134454688876396\n"}]},"apps":[],"jobName":"paragraph_1619252285568_245052259","id":"20210419-095518_395817723","dateCreated":"2021-04-24T08:18:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5464","user":"anonymous","dateFinished":"2021-04-25T05:42:39+0000","dateStarted":"2021-04-24T08:34:41+0000"},{"dateUpdated":"2021-04-24T08:18:05+0000","config":{"colWidth":12,"results":{},"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1619252285582_241204770","id":"20210419-180133_1136096568","dateCreated":"2021-04-24T08:18:05+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5465"}],"name":"SparkML_Scala_BD_MLR","id":"2G619R5WT","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}